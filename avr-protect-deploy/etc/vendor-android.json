{
	"vendor":"AVR-Portect",
	"protect_package_name":"com.avr.protect",
	"libNamePrefix":"avr",
	"shellReport":"android加固报告",
	"baseInfo":"基本信息",
	"taskInfo":"任务信息",
	"appName":"应用名",
	"pkgName":"包名",
	"version":"版本",
	"size":"大小",
	"shellExplanation":"加固说明",
	"codeProtect":"代码保护",
	"dexProtect":"DEX整体保护",
	"dexProtect_encrypt":"加密",
	"dexProtect_encrypt_hide":"加密隐藏",
	"dexProtect_step1":"把加固后的apk包拖入%s工具中，观察源代码。",
	"dexProtect_step2":"若找不到未加固前的apk源代码，则表示功能正常。",
	"dexShellPic":"DEX整体保护效果图",
	"antijava":"Java反编译保护",
	"antijava_step1":"使用JEB、JADX、Dex2jar等工具对apk进行反编译，观察源代码。",
	"antijava_step2":"如源码中方法内容被显示为报错信息，则功能生效。",
	"antijava_pic_jadx":"Java反编译保护jadx效果图",
	"antijava_pic_jeb":"Java反编译保护JEB效果图",
	"antijava_pic_d2j":"Java反编译保护Dex2Jar效果图",
	"allClass":"全量类",
	"dexStrProtect":"JAVA字符串常量加密",
	"dexStrProtect_step1":"把加固后的apk包拖入%s工具中，查看是否能看到原apk的代码。",
	"dexStrProtect_step2":"观察源代码，如常量字符串被替换为函数调用，则功能生效。",
	"dexStrProtect_pic":"字符串加密效果图",
	"dexVirtual":"JAVA指令虚拟化保护",
	"dexVirtual_step1":"把加固后的apk包拖入%s工具中，观察源代码。",
	"dexVirtual_step2":"如源码中方法内容被替换为dv.v()的调用，则功能生效。",
	"dexVirtual_pic":"代码虚拟化效果图",
	"soProtect":"SO壳保护",
	"soProtect_step1":"使用zip压缩工具解压apk。",
	"soProtect_step2":"进入解压目录，提取目录lib/armeabi/下的任意.so文件。",
	"soProtect_step3":"把步骤2中提取的so文件拖入%s工具中。",
	"soProtect_step4":"如%s不断弹出如下图的错误提示框，则功能生效。",
	"soProtect_pic":"SO壳保护后在IDA下无法分析的效果图",
	"fileProtect":"文件保护",
	"file_modify":"文件防篡改",
	"file_modify_step1":"使用%s压缩工具解压apk，提取assets目录下任意资源文件。",
	"file_modify_step2":"使用%s压缩工具把替换文件后的目录压缩为zip格式，并修改后缀名为.apk。",
	"file_modify_step3":"对新的apk进行签名（必须使用与原包同样的签名文件）后运行测试。",
	"file_modify_step4":"如程序不能正常运行，则功能生效。",
	"repack":"防重打包",
	"repack_step1":"使用%s解包，再重新打包。假设原始包文件名为`orig.apk`，重打包后的文件名为`repack.apk`。",
	"repack_step2":"用与原包不同的签名文件来对输出的`repack.apk`文件进行重新签名，并安装到手机中运行。",
	"repack_step3":"如果程序无法正常运行，则功能生效；否则功能无效。",
	"antiManifest":"AndroidManifest反静态分析",
	"antiManifest_step1":"使用%s工具解包。假设原始包文件名为`orig.apk`，解包后输出文件夹名称为`apkde`。",
	"antiManifest_step2":"解包过程中程序发生异常，没有正常生成`apkde`文件夹，则功能生效；否则功能无效。",
	"dbenc":"SQLite加密",
	"dbenc_step1":"先准备一台root过的android设备。",
	"dbenc_step2":"在命令行工具中执行命令`adb shell`连接android设备。",
	"dbenc_step3":"再执行命令`su`获取设备的su权限。",
	"dbenc_step4":"进入到应用的数据库目录下，如命令：`cd /data/data/com.test.logindemo/databases`。",
	"dbenc_step5":"用cat命令查看里面的数据库文件，如命令：`cat test.db`，并观察命令行窗口中输出的数据库文件内容。",
	"dbenc_step6":"如果输出的内容是乱码，则功能生效。否则，功能未生效。",
	"spenc":"SharePreference加密",
	"spenc_step1":"先准备一台root过的android设备。",
	"spenc_step2":"在命令行工具中执行命令`adb shell`连接android设备。",
	"spenc_step3":"再执行命令`su`获取设备的su权限。",
	"spenc_step4":"进入到应用的数据库目录下，如命令：`cd /data/data/com.test.logindemo/shared_prefs`。",
	"spenc_step5":"用cat命令查看里面的数据库文件，如命令：`cat setting.xml`，并观察命令行窗口中输出的数据库文件内容。",
	"spenc_step6":"如果输出的内容是乱码，则功能生效。否则，功能未生效。",
	"resenc":"资源文件加密",
	"resenc_step1":"使用%s压缩工具解压apk。",
	"resenc_step2":"提取解压目录下assets下的任意图片或js文件。",
	"resenc_step3":"如提取图片，则直接运行，查看能否正常显示，如提取js文件，直接以文本形式打开，查看其内容是否明文。",
	"resenc_step4":"如图片不能正常显示，js文件不显示明文，则功能生效。",
	"antiShot":"防截屏",
	"antiShot_step1":"将加固后的apk文件安装到手机中运行。",
	"antiShot_step2":"在\"保护记录\"内选择一个Activity，并在手机中切换到这个Activity对应的界面。",
	"antiShot_step3":"同时按下【音量下】键 和【电源】键进行截屏。",
	"antiShot_step4":"如果手机相册里面无法找到截屏图片，则功能生效；否则无效。",
	"allActivity":"全量Activity",
	"runningProtect":"运行时保护",
	"antiEmulator":"防模拟器",
	"antiEmulator_step1":"使用下列模拟器，安装和运行加固后的apk。",
	"antiEmulator_step2":"观察运行效果，如程序退出，则功能生效。",
	"yeshen":"夜神模拟器",
	"xiaoyao":"逍遥模拟器",
	"tiantian":"天天模拟器",
	"antiInject":"防注入",
	"antiInject_step1":"安装%s工具到手机。",
	"antiInject_step2":"安装并运行被加固的程序。",
	"antiInject_step3":"观察运行效果，如程序退出，则功能生效。",
	"antiMemdump":"防内存dump",
	"antiMemdump_step1":"准备一台已经root的手机，一台配置好adb工具的电脑，并把手机链接电脑。",
	"antiMemdump_step2":"打开命令行，运行 adb shell,进入手机命令行模式。",
	"antiMemdump_step3":"运行命令 su 运行root用户模式。",
	"antiMemdump_step4":"运行命令 ps | grep <包名>(7.0以上手机运行ps -ef | grep <包名>)，查看被保护应用的进程号pid。",
	"antiMemdump_step5":"运行命令 cat /proc/<pid>/maps | lib%s-ind.so，并查看其起始与结束地址。",
	"antiMemdump_step6":"根据 结束地址-起始地址=大小 计算出需要dump的文件大小。",
	"antiMemdump_step7":"运行命令 dd if=/proc/<pid>/mem of=/data/local/tmp/abc skip=<起始地址> ibs=1 count=<大小>。",
	"antiMemdump_step8":"观察手机运行情况，如程序退出，则功能生效。",
	"multi_run":"防多开运行",
	"multi_run_step1":"安装任意分身软件到手机。",
	"multi_run_step2":"安装被保护的apk到手机并运行，同时使用分身软件的多开功能运行被保护的apk。",
	"multi_run_step3":"观察应用运行情况，如果系统中运行多个相同应用，且应用崩溃，则保护生效。",
	"multi_run_software":"防分身软件",
	"multi_run_software_step1":"安装%s工具到手机。",
	"multi_run_software_step2":"安装被保护的apk到手机并使用%s工具运行。",
	"multi_run_software_step3":"观察应用运行情况，如果应用退出或崩溃，则保护生效。",
	"antiroot":"防root",
	"antiroot_step1":"使用被root的手机，安装和运行加固后的apk。",
	"antiroot_step2":"观察运行效果，如程序退出，则功能生效。",
	"rootPhone":"被root手机",
	"antiLog":"防日志泄漏",
	"antiLog_step1":"手机连接电脑，并安装被保护应用。",
	"antiLog_step2":"运行命令 adb shell logcat,并运行被保护应用。",
	"antiLog_step3":"观察日志输出，如无被保护程序的日志输出，则功能生效。",
	"antidebug":"防调试",
	"antidebug_step1":"准备一台已经root的手机，一台配置好adb工具的电脑，并把手机链接电脑。",
	"antidebug_step2":"点击下列链接，下载%s工具，并解压。",
	"antidebug_step3":"打开命令提示符，并切换到解压目录，运行命令 adb push gdbserver /data/local/tmp。",
	"antidebug_step4":"运行命令 adb shell，进入手机命令行界面，并运行su命令，获取root权限。",
	"antidebug_step5":"运行命令 cd /data/local/tmp，进入tmp目录。",
	"antidebug_step6":"运行命令 chmod 777 gdbserver 更改gdbserver的权限。",
	"antidebug_step7":"手动运行被加固应用。",
	"antidebug_step8":"运行命令 ps | grep com.avr.abc(具体为被加固应用包名)，获取程序pid。",
	"antidebug_step9":"运行命令 gdbserver remote:1234 --attach pid（步骤三仲获取的pid）。",
	"antidebug_step10":"观察程序运行状况，如程序退出，则功能生效。",
	"antiflaw_janus":"防flaw_janus漏洞",
	"antiflaw_janus_step1":"点击下列链接，下载%s。",
	"antiflaw_janus_step2":"使用010editor打开被加固的apk。",
	"antiflaw_janus_step3":"把头4个字节50 4B 03 04修改为64 65 78 0A。",
	"antiflaw_janus_step4":"安装并运行修改完成的程序。",
	"antiflaw_janus_step5":"观察程序运行状况，如程序退出，则功能生效。",
	"apktool_decode":"解包命令：`apktool d ./orig.apk -f -o ./apkde`",
	"apktool_build":"重新打包命令：`apktool b ./apkde -o ./repack.apk`",
	"omission":"完整列表详见报告末尾",
	"checkProcess":"检查过程",
	"checkStep":"按下列步骤进行验证",
	"checkTools":"检查工具",
	"software":"软件工具",
	"device":"硬件设备",
	"root_phone":"一台已经获取root权限的手机",
	"protectRecord":"保护记录",
	"protectRecordSample":"保护记录示例",
	"fullProtectRecord":"完整保护记录",
	"newItem":"新增",
	"open":"开启",
	"close":"关闭",
    "dbenc_pic":"database加密对比图",
    "spenc_pic":"SharePreference对比图",
	"encrypt":"加密",
	"adbcommand":"adb命令",
	"IDA":"IDA试用版",

	"sdk_fileName":"文件名",
	"sdk_entryClass":"入口类",

	"sdk_strP_step1":"使用zip压缩工具解压加固后的文件，取出里面的`classes.jar`文件。",
	"sdk_strP_step2":"把加固后的jar包拖入%s工具中，观察源代码。",
	"sdk_strP_step3":"如常量字符串被替换为函数调用，则功能生效。",

	"sdk_dexVirtual_step1":"使用zip压缩工具解压加固后的文件，取出里面的`classes.jar`文件。",
	"sdk_dexVirtual_step2":"把加固后的jar包拖入%s工具中，观察源代码。",
	"sdk_dexVirtual_step3":"如源码中方法内容被替换为x.v()的调用，则功能生效。"
}


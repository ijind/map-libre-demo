package ai.txai.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ai.txai.database.location.Point;
import ai.txai.database.location.PointConverter;

import ai.txai.database.site.Site;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SITE".
*/
public class SiteDao extends AbstractDao<Site, String> {

    public static final String TABLENAME = "SITE";

    /**
     * Properties of entity Site.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Point = new Property(1, String.class, "point", false, "POINT");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property AreaId = new Property(4, String.class, "areaId", false, "AREA_ID");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property RecentlyUsed = new Property(6, boolean.class, "recentlyUsed", false, "RECENTLY_USED");
    }

    private final PointConverter pointConverter = new PointConverter();

    public SiteDao(DaoConfig config) {
        super(config);
    }
    
    public SiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SITE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"POINT\" TEXT," + // 1: point
                "\"ICON\" TEXT," + // 2: icon
                "\"NAME\" TEXT," + // 3: name
                "\"AREA_ID\" TEXT," + // 4: areaId
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"RECENTLY_USED\" INTEGER NOT NULL );"); // 6: recentlyUsed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Site entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Point point = entity.getPoint();
        if (point != null) {
            stmt.bindString(2, pointConverter.convertToDatabaseValue(point));
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(5, areaId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getRecentlyUsed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Site entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Point point = entity.getPoint();
        if (point != null) {
            stmt.bindString(2, pointConverter.convertToDatabaseValue(point));
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(5, areaId);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
        stmt.bindLong(7, entity.getRecentlyUsed() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Site readEntity(Cursor cursor, int offset) {
        Site entity = new Site( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : pointConverter.convertToEntityProperty(cursor.getString(offset + 1)), // point
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.getShort(offset + 6) != 0 // recentlyUsed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Site entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPoint(cursor.isNull(offset + 1) ? null : pointConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecentlyUsed(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Site entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Site entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Site entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

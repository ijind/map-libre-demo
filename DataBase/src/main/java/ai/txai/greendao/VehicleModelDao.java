package ai.txai.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ai.txai.database.vehicle.VehicleModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICLE_MODEL".
*/
public class VehicleModelDao extends AbstractDao<VehicleModel, String> {

    public static final String TABLENAME = "VEHICLE_MODEL";

    /**
     * Properties of entity VehicleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property MaxPassengerNum = new Property(1, Integer.class, "maxPassengerNum", false, "MAX_PASSENGER_NUM");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PictureUrl = new Property(3, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
    }


    public VehicleModelDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICLE_MODEL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MAX_PASSENGER_NUM\" INTEGER," + // 1: maxPassengerNum
                "\"NAME\" TEXT," + // 2: name
                "\"PICTURE_URL\" TEXT," + // 3: pictureUrl
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"COLOR\" TEXT);"); // 5: color
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICLE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VehicleModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer maxPassengerNum = entity.getMaxPassengerNum();
        if (maxPassengerNum != null) {
            stmt.bindLong(2, maxPassengerNum);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(4, pictureUrl);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VehicleModel entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer maxPassengerNum = entity.getMaxPassengerNum();
        if (maxPassengerNum != null) {
            stmt.bindLong(2, maxPassengerNum);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(4, pictureUrl);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VehicleModel readEntity(Cursor cursor, int offset) {
        VehicleModel entity = new VehicleModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // maxPassengerNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pictureUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // color
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VehicleModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMaxPassengerNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPictureUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VehicleModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VehicleModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VehicleModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

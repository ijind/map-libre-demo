package ai.txai.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ai.txai.database.vehicle.Vehicle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICLE".
*/
public class VehicleDao extends AbstractDao<Vehicle, String> {

    public static final String TABLENAME = "VEHICLE";

    /**
     * Properties of entity Vehicle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Color = new Property(1, String.class, "color", false, "COLOR");
        public final static Property IconUrl = new Property(2, String.class, "iconUrl", false, "ICON_URL");
        public final static Property PlateNo = new Property(3, String.class, "plateNo", false, "PLATE_NO");
        public final static Property VehicleNo = new Property(4, String.class, "vehicleNo", false, "VEHICLE_NO");
        public final static Property Brand = new Property(5, String.class, "brand", false, "BRAND");
        public final static Property PassengerNum = new Property(6, Integer.class, "passengerNum", false, "PASSENGER_NUM");
        public final static Property Demo = new Property(7, Boolean.class, "demo", false, "DEMO");
    }


    public VehicleDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"COLOR\" TEXT," + // 1: color
                "\"ICON_URL\" TEXT," + // 2: iconUrl
                "\"PLATE_NO\" TEXT," + // 3: plateNo
                "\"VEHICLE_NO\" TEXT," + // 4: vehicleNo
                "\"BRAND\" TEXT," + // 5: brand
                "\"PASSENGER_NUM\" INTEGER," + // 6: passengerNum
                "\"DEMO\" INTEGER);"); // 7: demo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vehicle entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(2, color);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(4, plateNo);
        }
 
        String vehicleNo = entity.getVehicleNo();
        if (vehicleNo != null) {
            stmt.bindString(5, vehicleNo);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(6, brand);
        }
 
        Integer passengerNum = entity.getPassengerNum();
        if (passengerNum != null) {
            stmt.bindLong(7, passengerNum);
        }
 
        Boolean demo = entity.getDemo();
        if (demo != null) {
            stmt.bindLong(8, demo ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vehicle entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(2, color);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(4, plateNo);
        }
 
        String vehicleNo = entity.getVehicleNo();
        if (vehicleNo != null) {
            stmt.bindString(5, vehicleNo);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(6, brand);
        }
 
        Integer passengerNum = entity.getPassengerNum();
        if (passengerNum != null) {
            stmt.bindLong(7, passengerNum);
        }
 
        Boolean demo = entity.getDemo();
        if (demo != null) {
            stmt.bindLong(8, demo ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Vehicle readEntity(Cursor cursor, int offset) {
        Vehicle entity = new Vehicle( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // color
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // plateNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vehicleNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brand
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // passengerNum
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // demo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vehicle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlateNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVehicleNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrand(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassengerNum(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDemo(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Vehicle entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Vehicle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Vehicle entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package ai.txai.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ai.txai.database.location.ListPointConverter;
import ai.txai.database.order.bean.FareInfoBean;
import ai.txai.database.order.bean.FareInfoConverter;
import ai.txai.database.order.bean.PayOrderConverter;
import ai.txai.database.order.bean.PayOrderInfoBean;
import java.util.List;

import ai.txai.database.order.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, String> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property PickUpId = new Property(1, String.class, "pickUpId", false, "PICK_UP_ID");
        public final static Property DropOffId = new Property(2, String.class, "dropOffId", false, "DROP_OFF_ID");
        public final static Property EstimateRouter = new Property(3, String.class, "estimateRouter", false, "ESTIMATE_ROUTER");
        public final static Property PickupRouter = new Property(4, String.class, "pickupRouter", false, "PICKUP_ROUTER");
        public final static Property OrderStatus = new Property(5, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property PayStatus = new Property(6, String.class, "payStatus", false, "PAY_STATUS");
        public final static Property DispatchStatus = new Property(7, String.class, "dispatchStatus", false, "DISPATCH_STATUS");
        public final static Property CreateTime = new Property(8, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(9, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property AutoDistance = new Property(10, double.class, "autoDistance", false, "AUTO_DISTANCE");
        public final static Property ManualDistance = new Property(11, double.class, "manualDistance", false, "MANUAL_DISTANCE");
        public final static Property AllDistance = new Property(12, double.class, "allDistance", false, "ALL_DISTANCE");
        public final static Property AutoDuration = new Property(13, double.class, "autoDuration", false, "AUTO_DURATION");
        public final static Property ManualDuration = new Property(14, double.class, "manualDuration", false, "MANUAL_DURATION");
        public final static Property AllDuration = new Property(15, double.class, "allDuration", false, "ALL_DURATION");
        public final static Property FareInfo = new Property(16, String.class, "fareInfo", false, "FARE_INFO");
        public final static Property PayOrderInfo = new Property(17, String.class, "payOrderInfo", false, "PAY_ORDER_INFO");
        public final static Property OrderFare = new Property(18, double.class, "orderFare", false, "ORDER_FARE");
        public final static Property DueFare = new Property(19, double.class, "dueFare", false, "DUE_FARE");
        public final static Property DiscountFare = new Property(20, double.class, "discountFare", false, "DISCOUNT_FARE");
        public final static Property VehicleNo = new Property(21, String.class, "vehicleNo", false, "VEHICLE_NO");
        public final static Property VehicleModelId = new Property(22, String.class, "vehicleModelId", false, "VEHICLE_MODEL_ID");
        public final static Property Memo = new Property(23, String.class, "memo", false, "MEMO");
    }

    private final ListPointConverter estimateRouterConverter = new ListPointConverter();
    private final ListPointConverter pickupRouterConverter = new ListPointConverter();
    private final FareInfoConverter fareInfoConverter = new FareInfoConverter();
    private final PayOrderConverter payOrderInfoConverter = new PayOrderConverter();

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PICK_UP_ID\" TEXT," + // 1: pickUpId
                "\"DROP_OFF_ID\" TEXT," + // 2: dropOffId
                "\"ESTIMATE_ROUTER\" TEXT," + // 3: estimateRouter
                "\"PICKUP_ROUTER\" TEXT," + // 4: pickupRouter
                "\"ORDER_STATUS\" TEXT," + // 5: orderStatus
                "\"PAY_STATUS\" TEXT," + // 6: payStatus
                "\"DISPATCH_STATUS\" TEXT," + // 7: dispatchStatus
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 8: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 9: updateTime
                "\"AUTO_DISTANCE\" REAL NOT NULL ," + // 10: autoDistance
                "\"MANUAL_DISTANCE\" REAL NOT NULL ," + // 11: manualDistance
                "\"ALL_DISTANCE\" REAL NOT NULL ," + // 12: allDistance
                "\"AUTO_DURATION\" REAL NOT NULL ," + // 13: autoDuration
                "\"MANUAL_DURATION\" REAL NOT NULL ," + // 14: manualDuration
                "\"ALL_DURATION\" REAL NOT NULL ," + // 15: allDuration
                "\"FARE_INFO\" TEXT," + // 16: fareInfo
                "\"PAY_ORDER_INFO\" TEXT," + // 17: payOrderInfo
                "\"ORDER_FARE\" REAL NOT NULL ," + // 18: orderFare
                "\"DUE_FARE\" REAL NOT NULL ," + // 19: dueFare
                "\"DISCOUNT_FARE\" REAL NOT NULL ," + // 20: discountFare
                "\"VEHICLE_NO\" TEXT," + // 21: vehicleNo
                "\"VEHICLE_MODEL_ID\" TEXT," + // 22: vehicleModelId
                "\"MEMO\" TEXT);"); // 23: memo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pickUpId = entity.getPickUpId();
        if (pickUpId != null) {
            stmt.bindString(2, pickUpId);
        }
 
        String dropOffId = entity.getDropOffId();
        if (dropOffId != null) {
            stmt.bindString(3, dropOffId);
        }
 
        List estimateRouter = entity.getEstimateRouter();
        if (estimateRouter != null) {
            stmt.bindString(4, estimateRouterConverter.convertToDatabaseValue(estimateRouter));
        }
 
        List pickupRouter = entity.getPickupRouter();
        if (pickupRouter != null) {
            stmt.bindString(5, pickupRouterConverter.convertToDatabaseValue(pickupRouter));
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(6, orderStatus);
        }
 
        String payStatus = entity.getPayStatus();
        if (payStatus != null) {
            stmt.bindString(7, payStatus);
        }
 
        String dispatchStatus = entity.getDispatchStatus();
        if (dispatchStatus != null) {
            stmt.bindString(8, dispatchStatus);
        }
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getUpdateTime());
        stmt.bindDouble(11, entity.getAutoDistance());
        stmt.bindDouble(12, entity.getManualDistance());
        stmt.bindDouble(13, entity.getAllDistance());
        stmt.bindDouble(14, entity.getAutoDuration());
        stmt.bindDouble(15, entity.getManualDuration());
        stmt.bindDouble(16, entity.getAllDuration());
 
        FareInfoBean fareInfo = entity.getFareInfo();
        if (fareInfo != null) {
            stmt.bindString(17, fareInfoConverter.convertToDatabaseValue(fareInfo));
        }
 
        PayOrderInfoBean payOrderInfo = entity.getPayOrderInfo();
        if (payOrderInfo != null) {
            stmt.bindString(18, payOrderInfoConverter.convertToDatabaseValue(payOrderInfo));
        }
        stmt.bindDouble(19, entity.getOrderFare());
        stmt.bindDouble(20, entity.getDueFare());
        stmt.bindDouble(21, entity.getDiscountFare());
 
        String vehicleNo = entity.getVehicleNo();
        if (vehicleNo != null) {
            stmt.bindString(22, vehicleNo);
        }
 
        String vehicleModelId = entity.getVehicleModelId();
        if (vehicleModelId != null) {
            stmt.bindString(23, vehicleModelId);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(24, memo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String pickUpId = entity.getPickUpId();
        if (pickUpId != null) {
            stmt.bindString(2, pickUpId);
        }
 
        String dropOffId = entity.getDropOffId();
        if (dropOffId != null) {
            stmt.bindString(3, dropOffId);
        }
 
        List estimateRouter = entity.getEstimateRouter();
        if (estimateRouter != null) {
            stmt.bindString(4, estimateRouterConverter.convertToDatabaseValue(estimateRouter));
        }
 
        List pickupRouter = entity.getPickupRouter();
        if (pickupRouter != null) {
            stmt.bindString(5, pickupRouterConverter.convertToDatabaseValue(pickupRouter));
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(6, orderStatus);
        }
 
        String payStatus = entity.getPayStatus();
        if (payStatus != null) {
            stmt.bindString(7, payStatus);
        }
 
        String dispatchStatus = entity.getDispatchStatus();
        if (dispatchStatus != null) {
            stmt.bindString(8, dispatchStatus);
        }
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getUpdateTime());
        stmt.bindDouble(11, entity.getAutoDistance());
        stmt.bindDouble(12, entity.getManualDistance());
        stmt.bindDouble(13, entity.getAllDistance());
        stmt.bindDouble(14, entity.getAutoDuration());
        stmt.bindDouble(15, entity.getManualDuration());
        stmt.bindDouble(16, entity.getAllDuration());
 
        FareInfoBean fareInfo = entity.getFareInfo();
        if (fareInfo != null) {
            stmt.bindString(17, fareInfoConverter.convertToDatabaseValue(fareInfo));
        }
 
        PayOrderInfoBean payOrderInfo = entity.getPayOrderInfo();
        if (payOrderInfo != null) {
            stmt.bindString(18, payOrderInfoConverter.convertToDatabaseValue(payOrderInfo));
        }
        stmt.bindDouble(19, entity.getOrderFare());
        stmt.bindDouble(20, entity.getDueFare());
        stmt.bindDouble(21, entity.getDiscountFare());
 
        String vehicleNo = entity.getVehicleNo();
        if (vehicleNo != null) {
            stmt.bindString(22, vehicleNo);
        }
 
        String vehicleModelId = entity.getVehicleModelId();
        if (vehicleModelId != null) {
            stmt.bindString(23, vehicleModelId);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(24, memo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pickUpId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dropOffId
            cursor.isNull(offset + 3) ? null : estimateRouterConverter.convertToEntityProperty(cursor.getString(offset + 3)), // estimateRouter
            cursor.isNull(offset + 4) ? null : pickupRouterConverter.convertToEntityProperty(cursor.getString(offset + 4)), // pickupRouter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // payStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dispatchStatus
            cursor.getLong(offset + 8), // createTime
            cursor.getLong(offset + 9), // updateTime
            cursor.getDouble(offset + 10), // autoDistance
            cursor.getDouble(offset + 11), // manualDistance
            cursor.getDouble(offset + 12), // allDistance
            cursor.getDouble(offset + 13), // autoDuration
            cursor.getDouble(offset + 14), // manualDuration
            cursor.getDouble(offset + 15), // allDuration
            cursor.isNull(offset + 16) ? null : fareInfoConverter.convertToEntityProperty(cursor.getString(offset + 16)), // fareInfo
            cursor.isNull(offset + 17) ? null : payOrderInfoConverter.convertToEntityProperty(cursor.getString(offset + 17)), // payOrderInfo
            cursor.getDouble(offset + 18), // orderFare
            cursor.getDouble(offset + 19), // dueFare
            cursor.getDouble(offset + 20), // discountFare
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // vehicleNo
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // vehicleModelId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // memo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPickUpId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDropOffId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEstimateRouter(cursor.isNull(offset + 3) ? null : estimateRouterConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setPickupRouter(cursor.isNull(offset + 4) ? null : pickupRouterConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setOrderStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDispatchStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.getLong(offset + 8));
        entity.setUpdateTime(cursor.getLong(offset + 9));
        entity.setAutoDistance(cursor.getDouble(offset + 10));
        entity.setManualDistance(cursor.getDouble(offset + 11));
        entity.setAllDistance(cursor.getDouble(offset + 12));
        entity.setAutoDuration(cursor.getDouble(offset + 13));
        entity.setManualDuration(cursor.getDouble(offset + 14));
        entity.setAllDuration(cursor.getDouble(offset + 15));
        entity.setFareInfo(cursor.isNull(offset + 16) ? null : fareInfoConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setPayOrderInfo(cursor.isNull(offset + 17) ? null : payOrderInfoConverter.convertToEntityProperty(cursor.getString(offset + 17)));
        entity.setOrderFare(cursor.getDouble(offset + 18));
        entity.setDueFare(cursor.getDouble(offset + 19));
        entity.setDiscountFare(cursor.getDouble(offset + 20));
        entity.setVehicleNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setVehicleModelId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMemo(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Order entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
